/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    //default         Gauss linear;
    //default         cellMDLimited Gauss linear 1;
    //default 	     leastSquares;
    //default 	     cellMDLimited leastSquares 1;
    //default 	     cellLimited leastSquares 1;
    //default 	     faceMDLimited leastSquares 1;
    //default 	     faceLimited leastSquares 1;
    //default 	     cellMDLimited Gauss linear 1;
    //default 	     cellLimited<cubic> 1.5 Gauss linear 1;
    //default 	     faceMDLimited Gauss linear 1;
    //default 	     faceLimited Gauss linear 1;

/*
    default 	   cellLimited Gauss linear 1;

    grad(p)        cellLimited Gauss linear 0.333;
    grad(h)	       cellLimited Gauss linear 0.333;
*/

    //grad(rho)	     cellLimited Gauss linear 0.5;




    default         Gauss linear;

    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
}

divSchemes
{

    default         Gauss upwind;

    div(phi,U)      bounded Gauss linearUpwind limited;

    turbulence      bounded Gauss upwind;
    energy          bounded Gauss linearUpwind limited;

    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;

    div(phi,e)      $energy;
    div(phi,K)      $energy;
    div(phi,Ekp)    $energy;

    div(phid,p)     Gauss upwind;
    div((phi|interpolate(rho)),p)  bounded Gauss upwind;

    div(((rho*nuEff)*dev2(T(grad(U)))))    Gauss linear;



/*
    default         Gauss upwind;
    
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    // For postProcess
    div(grad(rho))  Gauss linear;
*/
/*
    //div(phi,U)      Gauss linearUpwind default;
    //div(phi,U)      Gauss vanLeerV;
    //div(phi,U)      Gauss MinmodV;
    //div(phi,U)      Gauss SuperBeeV;
    //div(phi,U)      Gauss linear;
    div(phi,U)      Gauss upwind;

    div(phi,K)      Gauss linear;
    div(phi,h)      Gauss limitedLinear 1;
    div(phid,p)     Gauss limitedLinear 1;

    //div(phi,K)      Gauss upwind;
    //div(phi,h)      Gauss upwind;
    //div(phid,p)     Gauss upwind;


    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
*/
}

laplacianSchemes
{
    //default         Gauss linear limited 1;
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    //reconstruct(rho) upwind;
    //reconstruct(U)   upwindV;
    //reconstruct(T)   upwind;
}

snGradSchemes
{
    //default         limited 1;
    default         corrected;
}


wallDist
{
    method meshWave;
}

// ************************************************************************* //
